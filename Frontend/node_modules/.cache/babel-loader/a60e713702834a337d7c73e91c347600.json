{"ast":null,"code":"var _jsxFileName = \"C:\\\\MERN test\\\\submission test\\\\This Is what im submitting\\\\frontend\\\\src\\\\ParkingManagement\\\\components\\\\ParkingLot.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport Draggable from \"react-draggable\"; // The default\n\nimport useGlobalContext from \"ParkingManagement/context\";\nimport { RiEditBoxLine } from \"react-icons/ri\";\nimport { GrClose } from \"react-icons/gr\";\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport { GiGate } from \"react-icons/gi\";\nimport ParkModal from \"./ParkModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ParkingLot() {\n  _s();\n\n  const {\n    ParkingSlots,\n    Entrances,\n    Editing,\n    ForManaging,\n    Notification,\n    Exited\n  } = useGlobalContext();\n  const [, setForManaging] = ForManaging;\n  const [exited, setExited] = Exited;\n  const [parkingSlots, setParkingSlots] = ParkingSlots;\n  const [entrances, setEntrances] = Entrances;\n  const [editing, setEditing] = Editing;\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isParking, setIsParking] = useState(false);\n  const [selectedGate, setSelectedGate] = useState(false);\n  const [, setNotification] = Notification;\n  const entrancesRef = useRef([]);\n  const parkingSlotsRef = useRef([]);\n  const [car, setCar] = useState({\n    size: \"Bike\"\n  });\n\n  const handlePark = e => {\n    e.preventDefault();\n    const exitedVehicles = exited.map(e => e.plate);\n    /* ------------------------- CHECK IF ALREADY PARKED ------------------------ */\n\n    const isParkedAlready = parkingSlots.map(p => p.occupied).includes(car === null || car === void 0 ? void 0 : car.plateNumber);\n    if (isParkedAlready) return setNotification({\n      message: `${car === null || car === void 0 ? void 0 : car.plateNumber} is parked already`,\n      color: \"red\"\n    });\n    /* -------------------- CHECK IF THERE IS AVAILABLE SLOT -------------------- */\n\n    const Available = size => {\n      const available = parkingSlots.filter(F => F.size === size && !F.occupied);\n      return available.length > 0 ? available : false;\n    };\n\n    const availableSlots = {\n      Car: Available(\"Car\") || Available(\"Van\"),\n      Van: Available(\"Van\"),\n      Bike: Available(\"Bike\")\n    };\n    if (!availableSlots[car.size]) return setNotification({\n      message: \"no available parking\",\n      color: \"red\"\n    });\n    /* ---------------------------- GET CLOSEST SLOT ---------------------------- */\n\n    const getClosest = () => {\n      const distance = p => Math.sqrt(Math.pow(point.x - p.x, 2) + Math.pow(point.y - p.y, 2));\n\n      const point = {\n        x: selectedGate.x,\n        y: selectedGate.y\n      },\n            points = availableSlots[car.size].filter(f => !f.occupied).map(p => p.defaultPosition),\n            closest = points.reduce((a, b) => distance(a) < distance(b) ? a : b);\n      return availableSlots[car.size].find(f => f.defaultPosition === closest);\n    };\n    /* -------------------------------- PARK CAR -------------------------------- */\n\n\n    const returner = exitedVehicles.includes(car === null || car === void 0 ? void 0 : car.plateNumber);\n    setParkingSlots(parkingSlots.map(p => p.id === getClosest().id ? { ...p,\n      occupied: car === null || car === void 0 ? void 0 : car.plateNumber,\n      entry: new Date(),\n      returner\n    } : p));\n    handleCloseModal();\n    /* ------------------ CHECK IF CAR RETURNED WITHIN AN HOUR ------------------ */\n\n    if (returner) {\n      setExited(exited.filter(e => e.plate !== (car === null || car === void 0 ? void 0 : car.plateNumber)));\n      return setNotification({\n        message: `${car === null || car === void 0 ? void 0 : car.plateNumber} returned within 1 hour !!`,\n        color: \"green\"\n      });\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsParking(false);\n    setNotification({});\n    setCar({\n      size: \"Bike\"\n    });\n    setSelectedGate(false);\n  };\n\n  const updatePosition = (arr, id, ref) => {\n    if (isDeleting) return arr.filter(A => A.id !== id);\n    return arr.map(A => A.id === id ? { ...A,\n      defaultPosition: {\n        x: ref === null || ref === void 0 ? void 0 : ref.state.x,\n        y: ref === null || ref === void 0 ? void 0 : ref.state.y\n      }\n    } : A);\n  };\n\n  const handleParking = i => {\n    setIsParking(true);\n    setForManaging({});\n    setSelectedGate(entrancesRef.current[i].state);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `text-5xl ${isParking && \"filter blur-sm\"} z-50`,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        title: \"EDIT\",\n        className: \"fixed text-4xl m-3 cursor-pointer z-50\",\n        onClick: () => setEditing(!editing),\n        children: editing ? /*#__PURE__*/_jsxDEV(GrClose, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 22\n        }, this) : /*#__PURE__*/_jsxDEV(RiEditBoxLine, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(FaTrashAlt, {\n          className: `${!editing && \"opacity-0 pointer-events-none\"} duration-500 fixed right-0 bottom-0 text-4xl m-5 text-red-400  z-50 cursor-pointer transform hover:scale-125`,\n          onMouseOver: () => setIsDeleting(true),\n          onMouseLeave: () => setIsDeleting(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), entrances.map((entrance, i) => /*#__PURE__*/_jsxDEV(Draggable, {\n        ref: el => {\n          entrancesRef.current[i] = el;\n        },\n        disabled: !editing,\n        defaultPosition: entrance.defaultPosition,\n        onStop: () => setEntrances(updatePosition(entrances, entrance.id, entrancesRef.current[i])),\n        children: /*#__PURE__*/_jsxDEV(GiGate, {\n          title: \"ENTRANCE\",\n          onClick: () => !editing ? handleParking(i) : null,\n          className: `text-green-400 absolute ${editing ? \"cursor-move\" : \"cursor-pointer\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)\n      }, entrance.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)), parkingSlots.map((slot, i) => {\n        var _slot$size;\n\n        return /*#__PURE__*/_jsxDEV(Draggable, {\n          ref: el => {\n            parkingSlotsRef.current[i] = el;\n          },\n          disabled: !editing,\n          defaultPosition: slot.defaultPosition,\n          onStop: el => setParkingSlots(updatePosition(parkingSlots, slot.id, parkingSlotsRef.current[i])),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            title: `${slot.size} parking`,\n            onClick: () => slot.occupied && !editing ? setForManaging({\n              open: true,\n              content: slot\n            }) : null,\n            className: `${slot.occupied && \"bg-green-300 cursor-pointer\"} ${editing && \"cursor-move\"}  h-12 w-12 border-2 grid place-content-center absolute text-2xl`,\n            children: (_slot$size = slot.size) === null || _slot$size === void 0 ? void 0 : _slot$size.charAt(0).toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)\n        }, slot.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), isParking && /*#__PURE__*/_jsxDEV(ParkModal, {\n      park: handlePark,\n      closeModal: handleCloseModal,\n      car: car,\n      setCar: setCar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ParkingLot, \"Xtyh6zWQqKtqC62AEtKHy6ETvwM=\", false, function () {\n  return [useGlobalContext];\n});\n\n_c = ParkingLot;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParkingLot\");","map":{"version":3,"sources":["C:/MERN test/submission test/This Is what im submitting/frontend/src/ParkingManagement/components/ParkingLot.js"],"names":["React","useRef","useState","Draggable","useGlobalContext","RiEditBoxLine","GrClose","FaTrashAlt","GiGate","ParkModal","ParkingLot","ParkingSlots","Entrances","Editing","ForManaging","Notification","Exited","setForManaging","exited","setExited","parkingSlots","setParkingSlots","entrances","setEntrances","editing","setEditing","isDeleting","setIsDeleting","isParking","setIsParking","selectedGate","setSelectedGate","setNotification","entrancesRef","parkingSlotsRef","car","setCar","size","handlePark","e","preventDefault","exitedVehicles","map","plate","isParkedAlready","p","occupied","includes","plateNumber","message","color","Available","available","filter","F","length","availableSlots","Car","Van","Bike","getClosest","distance","Math","sqrt","pow","point","x","y","points","f","defaultPosition","closest","reduce","a","b","find","returner","id","entry","Date","handleCloseModal","updatePosition","arr","ref","A","state","handleParking","i","current","entrance","el","slot","open","content","charAt","toUpperCase"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport Draggable from \"react-draggable\"; // The default\nimport useGlobalContext from \"ParkingManagement/context\";\nimport { RiEditBoxLine } from \"react-icons/ri\";\nimport { GrClose } from \"react-icons/gr\";\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport { GiGate } from \"react-icons/gi\";\nimport ParkModal from \"./ParkModal\";\n\nexport default function ParkingLot() {\n  const {\n    ParkingSlots,\n    Entrances,\n    Editing,\n    ForManaging,\n    Notification,\n    Exited,\n  } = useGlobalContext();\n  const [, setForManaging] = ForManaging;\n  const [exited, setExited] = Exited;\n  const [parkingSlots, setParkingSlots] = ParkingSlots;\n  const [entrances, setEntrances] = Entrances;\n  const [editing, setEditing] = Editing;\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isParking, setIsParking] = useState(false);\n  const [selectedGate, setSelectedGate] = useState(false);\n  const [, setNotification] = Notification;\n  const entrancesRef = useRef([]);\n  const parkingSlotsRef = useRef([]);\n  const [car, setCar] = useState({ size: \"Bike\" });\n\n  const handlePark = (e) => {\n    e.preventDefault();\n    const exitedVehicles = exited.map((e) => e.plate);\n\n    /* ------------------------- CHECK IF ALREADY PARKED ------------------------ */\n    const isParkedAlready = parkingSlots\n      .map((p) => p.occupied)\n      .includes(car?.plateNumber);\n    if (isParkedAlready)\n      return setNotification({\n        message: `${car?.plateNumber} is parked already`,\n        color: \"red\",\n      });\n\n    /* -------------------- CHECK IF THERE IS AVAILABLE SLOT -------------------- */\n\n    const Available = (size) => {\n      const available = parkingSlots.filter(\n        (F) => F.size === size && !F.occupied\n      );\n      return available.length > 0 ? available : false;\n    };\n\n    const availableSlots = {\n      Car: Available(\"Car\") || Available(\"Van\"),\n      Van: Available(\"Van\"),\n      Bike: Available(\"Bike\"),\n    };\n\n    if (!availableSlots[car.size])\n      return setNotification({\n        message: \"no available parking\",\n        color: \"red\",\n      });\n\n    /* ---------------------------- GET CLOSEST SLOT ---------------------------- */\n\n    const getClosest = () => {\n      const distance = (p) =>\n        Math.sqrt(Math.pow(point.x - p.x, 2) + Math.pow(point.y - p.y, 2));\n\n      const point = { x: selectedGate.x, y: selectedGate.y },\n        points = availableSlots[car.size]\n          .filter((f) => !f.occupied)\n          .map((p) => p.defaultPosition),\n        closest = points.reduce((a, b) => (distance(a) < distance(b) ? a : b));\n      return availableSlots[car.size].find(\n        (f) => f.defaultPosition === closest\n      );\n    };\n\n    /* -------------------------------- PARK CAR -------------------------------- */\n\n    const returner = exitedVehicles.includes(car?.plateNumber);\n\n    setParkingSlots(\n      parkingSlots.map((p) =>\n        p.id === getClosest().id\n          ? { ...p, occupied: car?.plateNumber, entry: new Date(), returner }\n          : p\n      )\n    );\n\n    handleCloseModal();\n\n    /* ------------------ CHECK IF CAR RETURNED WITHIN AN HOUR ------------------ */\n\n    if (returner) {\n      setExited(exited.filter((e) => e.plate !== car?.plateNumber));\n      return setNotification({\n        message: `${car?.plateNumber} returned within 1 hour !!`,\n        color: \"green\",\n      });\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsParking(false);\n    setNotification({});\n    setCar({ size: \"Bike\" });\n    setSelectedGate(false);\n  };\n\n  const updatePosition = (arr, id, ref) => {\n    if (isDeleting) return arr.filter((A) => A.id !== id);\n    return arr.map((A) =>\n      A.id === id\n        ? {\n            ...A,\n            defaultPosition: { x: ref?.state.x, y: ref?.state.y },\n          }\n        : A\n    );\n  };\n\n  const handleParking = (i) => {\n    setIsParking(true);\n    setForManaging({});\n    setSelectedGate(entrancesRef.current[i].state);\n  };\n\n  return (\n    <>\n      <div className={`text-5xl ${isParking && \"filter blur-sm\"} z-50`}>\n        <button\n          title=\"EDIT\"\n          className=\"fixed text-4xl m-3 cursor-pointer z-50\"\n          onClick={() => setEditing(!editing)}\n        >\n          {editing ? <GrClose /> : <RiEditBoxLine />}\n        </button>\n\n        <button>\n          <FaTrashAlt\n            className={`${\n              !editing && \"opacity-0 pointer-events-none\"\n            } duration-500 fixed right-0 bottom-0 text-4xl m-5 text-red-400  z-50 cursor-pointer transform hover:scale-125`}\n            onMouseOver={() => setIsDeleting(true)}\n            onMouseLeave={() => setIsDeleting(false)}\n          />\n        </button>\n\n        {entrances.map((entrance, i) => (\n          <Draggable\n            ref={(el) => {\n              entrancesRef.current[i] = el;\n            }}\n            disabled={!editing}\n            key={entrance.id}\n            defaultPosition={entrance.defaultPosition}\n            onStop={() =>\n              setEntrances(\n                updatePosition(entrances, entrance.id, entrancesRef.current[i])\n              )\n            }\n          >\n            <GiGate\n              title=\"ENTRANCE\"\n              onClick={() => (!editing ? handleParking(i) : null)}\n              className={`text-green-400 absolute ${\n                editing ? \"cursor-move\" : \"cursor-pointer\"\n              }`}\n            />\n          </Draggable>\n        ))}\n\n        {parkingSlots.map((slot, i) => (\n          <Draggable\n            ref={(el) => {\n              parkingSlotsRef.current[i] = el;\n            }}\n            key={slot.id}\n            disabled={!editing}\n            defaultPosition={slot.defaultPosition}\n            onStop={(el) =>\n              setParkingSlots(\n                updatePosition(\n                  parkingSlots,\n                  slot.id,\n                  parkingSlotsRef.current[i]\n                )\n              )\n            }\n          >\n            <div\n              title={`${slot.size} parking`}\n              onClick={() =>\n                slot.occupied && !editing\n                  ? setForManaging({ open: true, content: slot })\n                  : null\n              }\n              className={`${slot.occupied && \"bg-green-300 cursor-pointer\"} ${\n                editing && \"cursor-move\"\n              }  h-12 w-12 border-2 grid place-content-center absolute text-2xl`}\n            >\n              {slot.size?.charAt(0).toUpperCase()}\n            </div>\n          </Draggable>\n        ))}\n      </div>\n\n      {isParking && (\n        <ParkModal\n          park={handlePark}\n          closeModal={handleCloseModal}\n          car={car}\n          setCar={setCar}\n        />\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}